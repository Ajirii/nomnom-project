generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userId   String  @id @default(uuid())
  name     String
  email    String  @unique
  googleId String  @unique

  quests           Quest[]
  userAchievements UserAchievement[]
  userCosmetics    UserCosmetic[]
}

model Recipe {
  recipeId       String   @id @default(uuid())
  title          String
  ingredients    String[]
  instructions   String[]
  cookingMinutes Int
  servings       Int
  cuisine        String
  notes          String
  favorite       Boolean  @default(false)
}

model Quest {
  questId     String  @id @default(uuid())
  title       String
  description String
  reward      Int // increases hunger level on completion. For example, the reward could be 10, 25, 50. The max hunger level is 100 hp.
  status      Status
  isCompleted Boolean @default(false)

  userId   String
  user     User   @relation(fields: [userId], references: [userId])
}

enum Status {
  available
  accepted
  completed
}

model Achievement {
  achievementId     String   @id @default(uuid())
  name              String
  description       String
  iconUrl           String?
  createdAt         DateTime @default(now())

  cosmeticId        String? @unique
  cosmetic          Cosmetic? @relation(fields: [cosmeticId], references: [cosmeticId])

  userAchievements  UserAchievement[]
}

model UserAchievement {
  userAid       String   @id @default(uuid())
  userId        String
  achievementId String
  unlockedAt    DateTime @default(now())

  user          User        @relation(fields: [userId], references: [userId])
  achievement   Achievement @relation(fields: [achievementId], references: [achievementId])

  @@unique([userId, achievementId])
}

model Cosmetic {
  cosmeticId  String @id @default(uuid())
  name        String
  description String
  iconUrl     String?

  achievement Achievement?
  userCosmetics UserCosmetic[]
}

model UserCosmetic {
  userCid     String   @id @default(uuid())
  userId      String
  cosmeticId  String

  user        User     @relation(fields: [userId], references: [userId])
  cosmetic    Cosmetic @relation(fields: [cosmeticId], references: [cosmeticId])

  @@unique([userId, cosmeticId])
}
